/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

package view;

import controller.Config;
import controller.Controller;
import controller.Dificulty;
import static controller.Dificulty.BEGINNER;
import static controller.Dificulty.CUSTOM;
import static controller.Dificulty.EXPERT;
import static controller.Dificulty.INTERMEDIATE;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Point;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.border.Border;

/**
 *
 * @author Fernando GJ
 */
public class MainWindow extends javax.swing.JFrame {
    private final Controller CONTROLLER;
    private Timer timer;
    
    private JPanel gridPanel;
    private File[] resources;
    private boolean mineDiscovered;
    private Dificulty currentDificulty;
    private CustomGrid dialog;
    
    
    /** Creates new form MainWindow */
    public MainWindow(Controller controller) {
        initComponents();
        
        this.CONTROLLER = controller;

        try {
            this.resources = new File(this.getClass().getResource("../src").toURI()).listFiles();
        } catch (URISyntaxException ex) {}
        
        this.setIconImage(new ImageIcon(this.getClass().getResource("../src/icon.png")).getImage());
        
        this.createNewGrid(Dificulty.BEGINNER);
        this.createCrono();
        
        for (int i = 0; i < this.gameOption.getItemCount(); i++) {
            JMenuItem menuItem = this.gameOption.getItem(i);

            if (menuItem != null) {
                menuItem.addActionListener(e -> {
                    Dificulty dificulty = null;

                    switch (menuItem.getText()) {
                        case "New" ->
                            dificulty = this.currentDificulty != null ? this.currentDificulty : Dificulty.BEGINNER;
                        case "Beginner" ->
                            dificulty = Dificulty.BEGINNER;
                        case "Intermediate" ->
                            dificulty = Dificulty.INTERMEDIATE;
                        case "Expert" ->
                            dificulty = Dificulty.EXPERT;
                        case "Custom..." ->
                            dificulty = Dificulty.CUSTOM;

                    }

                    if (dificulty != Dificulty.CUSTOM) {
                        this.timer.cancel();
                        this.createCrono();
                    }

                    createNewGrid(dificulty);
                });
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        upPanel = new javax.swing.JPanel();
        inputMines = new javax.swing.JLabel();
        inputFace = new javax.swing.JLabel();
        inputTime = new javax.swing.JLabel();
        downPanel = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        gameOption = new javax.swing.JMenu();
        newOption = new javax.swing.JMenuItem();
        separatorOne = new javax.swing.JPopupMenu.Separator();
        beginnerOption = new javax.swing.JMenuItem();
        intermediateOption = new javax.swing.JMenuItem();
        expertOption = new javax.swing.JMenuItem();
        customOption = new javax.swing.JMenuItem();
        helpOption = new javax.swing.JMenu();
        howPlay = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Minesweeper");
        setResizable(false);

        upPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        upPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 70, 15));

        inputMines.setText("0");
        upPanel.add(inputMines);

        inputFace.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        inputFace.setToolTipText("Reset Game");
        inputFace.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        inputFace.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                inputFaceMouseReleased(evt);
            }
        });
        upPanel.add(inputFace);

        inputTime.setText("0");
        upPanel.add(inputTime);

        getContentPane().add(upPanel, java.awt.BorderLayout.PAGE_START);

        downPanel.setLayout(new java.awt.GridLayout(1, 0));
        getContentPane().add(downPanel, java.awt.BorderLayout.CENTER);

        gameOption.setText("Game");

        newOption.setText("New");
        gameOption.add(newOption);
        gameOption.add(separatorOne);

        beginnerOption.setText("Beginner");
        gameOption.add(beginnerOption);

        intermediateOption.setText("Intermediate");
        gameOption.add(intermediateOption);

        expertOption.setText("Expert");
        gameOption.add(expertOption);

        customOption.setText("Custom...");
        gameOption.add(customOption);

        menuBar.add(gameOption);

        helpOption.setText("Help");

        howPlay.setText("How To Play");
        howPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                howPlayActionPerformed(evt);
            }
        });
        helpOption.add(howPlay);

        menuBar.add(helpOption);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inputFaceMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inputFaceMouseReleased
        this.createNewGrid(this.currentDificulty);
        
        if(this.currentDificulty != Dificulty.CUSTOM) {
            this.timer.cancel();
            this.createCrono();
        }
    }//GEN-LAST:event_inputFaceMouseReleased

    private void howPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_howPlayActionPerformed
        try {
            URI uri = new URI("https://minesweepergame.com/strategy/how-to-play-minesweeper.php");
            Desktop.getDesktop().browse(uri);
        } catch (IOException | URISyntaxException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_howPlayActionPerformed

    private void createNewGrid(Dificulty gameDificulty) {
        Dimension gridDimensions = new Dimension();
        int minesNumber = 0; 
        
        byte index = 0;

        switch (gameDificulty) {
            case BEGINNER ->
                index = 0;
            case INTERMEDIATE ->
                index = 1;
            case EXPERT ->
                index = 2;
            case CUSTOM ->
                index = -1;
        }
        
        if(index != -1) {
            gridDimensions = Config.GRID_DIMENSIONS[index];
            minesNumber = Config.MINES_NUMBER[index];
        } else {
            if(this.dialog == null)
                this.dialog = new CustomGrid(this, true);
            
            this.dialog.setVisible(true);
            gridDimensions = this.dialog.getGridDimensions();
            
            if(gridDimensions == null)
                return;
            
            this.timer.cancel();
            this.createCrono();
            minesNumber = this.dialog.getMinesNumber();
        }
        
        GridLayout viewBoard = new GridLayout(gridDimensions.height, gridDimensions.width);
        
        this.gridPanel = new JPanel(viewBoard);
        Border cellBorder = BorderFactory.createLineBorder(Color.GRAY, 1);
        
        this.CONTROLLER.initGame(gridDimensions, minesNumber);
        this.currentDificulty = gameDificulty;
        this.inputFace.setIcon(new ImageIcon(this.getClass().getResource("../src/happy.png")));
        this.inputMines.setText(minesNumber + "");
        
        for (int i = 0; i < gridDimensions.height; i++) {
            for (int j = 0; j < gridDimensions.width; j++) {
                JButton btn = new JButton();
                btn.setPreferredSize(new Dimension(30, 30));
                btn.setBackground(Color.BLACK);
                btn.setFocusPainted(false);
                btn.setBorder(cellBorder);
                this.gridPanel.add(btn);
                final Point BOX_POINT = new Point(j, i);
                
                btn.addActionListener(e -> revealCell(BOX_POINT, btn, true));
            }
        }
        
        this.downPanel.removeAll();
        this.downPanel.add(this.gridPanel);
        this.pack();
    }
    
    private void createCrono() {
        this.timer = new Timer();

        this.timer.scheduleAtFixedRate(new TimerTask() {
            private int seconds;

            @Override
            public void run() {
                SwingUtilities.invokeLater(() -> inputTime.setText(++this.seconds + ""));
            }
        }, 0, 1000);
        
        this.mineDiscovered = false;
    }
    
    private void revealCell(Point cellPoint, JButton btn, boolean isActionedByPlayer) {
        if(this.mineDiscovered)
            return;
        
        int number = this.CONTROLLER.revealCellNumber(cellPoint);
        
        if (number != -99) {
            btn.setBackground(Color.WHITE);

            if (number != 0) {
                Icon icon = null;
                
                for (File resource : this.resources) {
                    String fileName = resource.getName();

                    if ((number == -1 && fileName.contains("bomb")) || (number != -1 && fileName.contains(number + ""))) {
                         icon = new ImageIcon(new ImageIcon(resource.getAbsolutePath()).getImage());
                         break;
                    }
                }
                
                if(number != -1) {
                    btn.setIcon(icon);
                    if (this.CONTROLLER.cellRevealed(cellPoint)) {
                        this.timer.cancel();
                        JOptionPane.showConfirmDialog(this, "Congrats. You're the winner!", "WINNER",
                                JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE);
                    }
                } else {
                    if(isActionedByPlayer) {
                        btn.setIcon(icon);
                        this.timer.cancel();
                        this.inputFace.setIcon(new ImageIcon(this.getClass().getResource("../src/dead.png")));
                        this.mineDiscovered = true;
                        Point[] coords = this.CONTROLLER.discoverAllMines();
                        
                        GridLayout panelLayout = (GridLayout) this.gridPanel.getLayout();
                        
                        for (Point coord : coords) {
                            JButton mineBtn = (JButton) this.gridPanel.getComponent(coord.y * panelLayout.getColumns() + coord.x);
                            mineBtn.setBackground(Color.WHITE);
                            mineBtn.setIcon(new ImageIcon(this.getClass().getResource("../src/bomb.png")));
                        }
                    }
                }
            } else {
                if(this.CONTROLLER.cellRevealed(cellPoint)) {
                    this.timer.cancel();
                    JOptionPane.showConfirmDialog(this, "Congrats. You're the winner!", "WINNER", 
                            JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
                
                GridLayout panelLayout = (GridLayout) this.gridPanel.getLayout();

                for (int i = -1; i < 2; i++) {
                    for (int j = -1; j < 2; j++) {
                        if (cellPoint.y + i > -1 && cellPoint.y + i < panelLayout.getRows() && cellPoint.x + j > -1
                                && cellPoint.x + j < panelLayout.getColumns()) {
                            JButton especifiedPositionBtn = (JButton) gridPanel.getComponent((cellPoint.y + i) * panelLayout.getColumns() + (cellPoint.x + j));
                            this.revealCell(new Point(cellPoint.x + j, cellPoint.y + i), especifiedPositionBtn, false);
                        }
                    }
                }
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem beginnerOption;
    private javax.swing.JMenuItem customOption;
    private javax.swing.JPanel downPanel;
    private javax.swing.JMenuItem expertOption;
    private javax.swing.JMenu gameOption;
    private javax.swing.JMenu helpOption;
    private javax.swing.JMenuItem howPlay;
    private javax.swing.JLabel inputFace;
    private javax.swing.JLabel inputMines;
    private javax.swing.JLabel inputTime;
    private javax.swing.JMenuItem intermediateOption;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newOption;
    private javax.swing.JPopupMenu.Separator separatorOne;
    private javax.swing.JPanel upPanel;
    // End of variables declaration//GEN-END:variables

} // end MainWindow